{"/home/travis/build/npmtest/node-npmtest-gulp-cache/test.js":"/* istanbul instrument in package npmtest_gulp_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cache/lib.npmtest_gulp_cache.js":"/* istanbul instrument in package npmtest_gulp_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_cache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_cache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-cache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_cache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_cache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_cache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_cache.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_cache.__dirname + '/lib.npmtest_gulp_cache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cache/node_modules/gulp-cache/index.js":"'use strict';\n\nvar Cache = require('cache-swap');\nvar File = require('vinyl');\nvar objectAssign = require('object-assign');\nvar objectOmit = require('object.omit');\nvar objectPick = require('object.pick');\nvar PluginError = require('gulp-util').PluginError;\nvar TaskProxy = require('./lib/TaskProxy');\nvar Transform = require('readable-stream/transform');\n\nvar VERSION = require('./package.json').version;\nvar fileCache = new Cache({cacheDirName: 'gulp-cache'});\n\nfunction defaultKey(file) {\n  return [VERSION, file.contents.toString('base64')].join('');\n}\n\nvar defaultOptions = {\n  fileCache: fileCache,\n  name: 'default',\n  key: defaultKey,\n  restore: function(restored) {\n    if (restored.contents) {\n      // Handle node 0.11 buffer to JSON as object with { type: 'buffer', data: [...] }\n      if (restored && restored.contents && Array.isArray(restored.contents.data)) {\n        restored.contents = new Buffer(restored.contents.data);\n      } else if (Array.isArray(restored.contents)) {\n        restored.contents = new Buffer(restored.contents);\n      } else if (typeof restored.contents === 'string') {\n        restored.contents = new Buffer(restored.contents, 'base64');\n      }\n    }\n\n    var restoredFile = new File(restored);\n    var extraTaskProperties = objectOmit(restored, Object.keys(restoredFile));\n\n    // Restore any properties that the original task put on the file;\n    // but omit the normal properties of the file\n    return objectAssign(restoredFile, extraTaskProperties);\n  },\n  success: true,\n  value: function(file) {\n    // Convert from a File object (from vinyl) into a plain object\n    return objectPick(file, ['cwd', 'base', 'contents', 'stat', 'history', 'path']);\n  }\n};\n\nvar cacheTask = function(task, opts) {\n  // Check for required task option\n  if (!task) {\n    throw new PluginError('gulp-cache', 'Must pass a task to cache()');\n  }\n\n  // Check if this task participates in the cacheable contract\n  if (task.cacheable) {\n    // Use the cacheable options, but allow the user to override them\n    opts = objectAssign({}, task.cacheable, opts);\n  }\n\n  // Make sure we have some sane defaults\n  opts = objectAssign({}, cacheTask.defaultOptions, opts);\n\n  return new Transform({\n    objectMode: true,\n    transform: function(file, enc, cb) {\n      if (file.isNull()) {\n        cb(null, file);\n        return;\n      }\n\n      if (file.isStream()) {\n        cb(new PluginError('gulp-cache', 'Cannot operate on stream sources'));\n        return;\n      }\n\n      new TaskProxy({\n        task: task,\n        file: file,\n        opts: opts\n      })\n      .processFile().then(function(result) {\n        cb(null, result);\n      }, function(err) {\n        cb(new PluginError('gulp-cache', err));\n      });\n    }\n  });\n};\n\ncacheTask.clear = function(opts) {\n  opts = objectAssign({}, cacheTask.defaultOptions, opts);\n\n  return new Transform({\n    objectMode: true,\n    transform: function(file, enc, cb) {\n      if (file.isNull()) {\n        cb(null, file);\n        return;\n      }\n\n      if (file.isStream()) {\n        cb(new PluginError('gulp-cache', 'Cannot operate on stream sources'));\n        return;\n      }\n\n      var taskProxy = new TaskProxy({\n        task: null,\n        file: file,\n        opts: opts\n      });\n\n      taskProxy.removeCachedResult().then(function() {\n        cb(null, file);\n      }).catch(function(err) {\n        cb(new PluginError('gulp-cache', err));\n      });\n    }\n  });\n};\n\ncacheTask.clearAll = function(done) {\n  fileCache.clear(null, function(err) {\n    if (err) {\n      var pluginError = new PluginError(\n        'gulp-cache',\n        'Problem clearing the cache: ' + err.message\n      );\n\n      if (done) {\n        done(pluginError);\n        return;\n      }\n\n      throw pluginError;\n    }\n\n    if (done) {\n      done();\n    }\n  });\n};\n\ncacheTask.fileCache = fileCache;\ncacheTask.defaultOptions = defaultOptions;\ncacheTask.Cache = Cache;\n\nmodule.exports = cacheTask;\n","/home/travis/build/npmtest/node-npmtest-gulp-cache/node_modules/gulp-cache/lib/TaskProxy.js":"'use strict';\n\nvar crypto = require('crypto');\n\nvar objectAssign = require('object-assign');\nvar objectOmit = require('object.omit');\nvar Bluebird = require('bluebird');\nvar tryJsonParse = require('try-json-parse');\n\nvar TaskProxy = function(opts) {\n  objectAssign(this, {\n    task: opts.task,\n    file: opts.file,\n    opts: opts.opts,\n    originalPath: opts.file.path\n  });\n};\n\nfunction makeHash(key) {\n  return crypto.createHash('md5').update(key).digest('hex');\n}\n\nobjectAssign(TaskProxy.prototype, {\n  processFile: function() {\n    var self = this;\n\n    return this._checkForCachedValue().then(function(cached) {\n      // If we found a cached value\n      // The path of the cache key should also be identical to the original one when the file path changed inside the task\n      if (cached.value && (!cached.value.filePathChangedInsideTask || cached.value.originalPath === self.file.path)) {\n        // Extend the cached value onto the file, but don't overwrite original path info\n        var file = objectAssign(\n          self.file,\n          objectOmit(cached.value, ['cwd', 'path', 'base', 'stat', 'history'])\n        );\n        // Restore the file path if it was set\n        if (cached.value.path && cached.value.filePathChangedInsideTask) {\n          file.path = cached.value.path;\n        }\n        return file;\n      }\n\n      // Otherwise, run the proxied task\n      return self._runProxiedTaskAndCache(cached.key);\n    });\n  },\n\n  removeCachedResult: function() {\n    var self = this;\n\n    return this._getFileKey().then(function(cachedKey) {\n      var removeCached = Bluebird.promisify(self.opts.fileCache.removeCached, {\n        context: self.opts.fileCache\n      });\n\n      return removeCached(self.opts.name, cachedKey);\n    });\n  },\n\n  _getFileKey: function() {\n    var getKey = this.opts.key;\n\n    if (typeof getKey === 'function' && getKey.length === 2) {\n      getKey = Bluebird.promisify(getKey.bind(this.opts));\n    }\n\n    return Bluebird.resolve(getKey(this.file)).then(function(key) {\n      if (!key) {\n        return key;\n      }\n\n      return makeHash(key);\n    });\n  },\n\n  _checkForCachedValue: function() {\n    var self = this;\n\n    return this._getFileKey().then(function(key) {\n      // If no key returned, bug out early\n      if (!key) {\n        return {\n          key: key,\n          value: null\n        };\n      }\n\n      var getCached = Bluebird.promisify(self.opts.fileCache.getCached.bind(self.opts.fileCache));\n\n      return getCached(self.opts.name, key).then(function(cached) {\n        if (!cached) {\n          return {\n            key: key,\n            value: null\n          };\n        }\n\n        var parsedContents = tryJsonParse(cached.contents);\n        if (parsedContents === undefined) {\n          parsedContents = {cached: cached.contents};\n        }\n\n        if (self.opts.restore) {\n          parsedContents = self.opts.restore(parsedContents);\n        }\n\n        return {\n          key: key,\n          value: parsedContents\n        };\n      });\n    });\n  },\n\n  _runProxiedTaskAndCache: function(cachedKey) {\n    var self = this;\n\n    return self._runProxiedTask().then(function(result) {\n      // If this wasn't a success, continue to next task\n      // TODO: Should this also offer an async option?\n      if (self.opts.success !== true && !self.opts.success(result)) {\n        return result;\n      }\n\n      return self._storeCachedResult(cachedKey, result).then(function() {\n        return result;\n      });\n    });\n  },\n\n  _runProxiedTask: function() {\n    var self = this;\n\n    return new Bluebird(function(resolve, reject) {\n      function handleError(err) {\n        // TODO: Errors will step on each other here\n\n        // Reduce the maxListeners back down\n        self.task.setMaxListeners(self.task._maxListeners - 1);\n\n        reject(err);\n      }\n\n      function handleData(datum) {\n        // Wait for data (can be out of order, so check for matching file we wrote)\n        if (self.file !== datum) {\n          return;\n        }\n\n        // Be good citizens and remove our listeners\n        self.task.removeListener('error', handleError);\n        self.task.removeListener('data', handleData);\n\n        // Reduce the maxListeners back down\n        self.task.setMaxListeners(self.task._maxListeners - 2);\n\n        resolve(datum);\n      }\n\n      // Bump up max listeners to prevent memory leak warnings\n      var currMaxListeners = self.task._maxListeners || 0;\n      self.task.setMaxListeners(currMaxListeners + 2);\n\n      self.task.on('data', handleData);\n      self.task.once('error', handleError);\n\n      // Run through the other task and grab output (or error)\n      // Not sure if a _.defer is necessary here\n      self.task.write(self.file);\n    });\n  },\n\n  _getValueFromResult: function(result) {\n    var getValue;\n\n    if (typeof this.opts.value !== 'function') {\n      if (typeof this.opts.value === 'string') {\n        getValue = {};\n        getValue[this.opts.value] = result[this.opts.value];\n      }\n\n      return Bluebird.resolve(getValue);\n    } else if (this.opts.value.length === 2) {\n      // Promisify if passed a node style function\n      getValue = Bluebird.promisify(this.opts.value.bind(this.opts));\n    } else {\n      getValue = this.opts.value;\n    }\n\n    return Bluebird.resolve(getValue(result));\n  },\n\n  _storeCachedResult: function(key, result) {\n    var self = this;\n\n    // If we didn't have a cachedKey, skip caching result\n    if (!key) {\n      return Bluebird.resolve(result);\n    }\n\n    return this._getValueFromResult(result).then(function(value) {\n      var val;\n      var addCached = Bluebird.promisify(self.opts.fileCache.addCached.bind(self.opts.fileCache));\n\n      if (typeof value !== 'string') {\n        if (value && typeof value === 'object' && Buffer.isBuffer(value.contents)) {\n          // Shallow copy so \"contents\" can be safely modified\n          val = objectAssign({}, value);\n          val.contents = val.contents.toString('utf8');\n        }\n\n        // Check if the task changed the file path\n        if (value.path !== self.originalPath) {\n          value.filePathChangedInsideTask = true;\n        }\n\n        // Keep track of the original path\n        value.originalPath = self.originalPath;\n\n        val = JSON.stringify(value, null, 2);\n      } else {\n        val = value;\n      }\n\n      return addCached(self.opts.name, key, val);\n    });\n  }\n});\n\nmodule.exports = TaskProxy;\n"}